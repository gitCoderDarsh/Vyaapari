generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?     // For Google OAuth users
  firstName     String?     // For manual signup users
  lastName      String?     // For manual signup users
  businessName  String?
  email         String      @unique
  phone         String?
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  accounts      Account[]
  sessions      Session[]
  inventory     Inventory[] // Relation to inventory items
  chatSessions  ChatSession[] // Relation to AI chat sessions
}

model Inventory {
  id             String   @id @default(cuid())
  userId         String   // Foreign key to User
  itemName       String   // Product/item name
  stockQuantity  Int      @default(0) // Current stock count
  itemPrice      Decimal  @db.Decimal(10, 2) // Price per unit (required for inventory value)
  customFields   Json?    // User-defined fields as JSON
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relation to user
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Index for fast user-based queries
  @@index([userId])
}

model ChatSession {
  id           String        @id @default(cuid())
  userId       String        // Foreign key to User
  name         String        // Chat session name (e.g., "Inventory Help", "Chat 1")
  isActive     Boolean       @default(true) // Whether this chat is currently active
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     ChatMessage[] // One-to-many relation with messages
  
  // Index for fast user-based queries
  @@index([userId])
  @@index([userId, createdAt])
}

model ChatMessage {
  id           String      @id @default(cuid())
  chatSessionId String     // Foreign key to ChatSession
  role         String      // "user" or "assistant"
  content      String      @db.Text // Message content (can be long)
  metadata     Json?       // Additional metadata (tokens used, model, etc.)
  createdAt    DateTime    @default(now())
  
  // Relations
  chatSession  ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  
  // Index for fast chat-based queries
  @@index([chatSessionId])
  @@index([chatSessionId, createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
